// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "dependabot/internal/db/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MergeRequestService is an autogenerated mock type for the MergeRequestService type
type MergeRequestService struct {
	mock.Mock
}

// Create provides a mock function with given fields: mergeRequest
func (_m *MergeRequestService) Create(mergeRequest *entity.MergeRequest) (uuid.UUID, error) {
	ret := _m.Called(mergeRequest)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*entity.MergeRequest) uuid.UUID); ok {
		r0 = rf(mergeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.MergeRequest) error); ok {
		r1 = rf(mergeRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: mergeRequest
func (_m *MergeRequestService) Delete(mergeRequest *entity.MergeRequest) error {
	ret := _m.Called(mergeRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MergeRequest) error); ok {
		r0 = rf(mergeRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MergeRequestService) GetAll() ([]entity.MergeRequest, error) {
	ret := _m.Called()

	var r0 []entity.MergeRequest
	if rf, ok := ret.Get(0).(func() []entity.MergeRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByRepositoryId provides a mock function with given fields: repositoryId
func (_m *MergeRequestService) GetAllByRepositoryId(repositoryId string) (*[]entity.MergeRequest, error) {
	ret := _m.Called(repositoryId)

	var r0 *[]entity.MergeRequest
	if rf, ok := ret.Get(0).(func(string) *[]entity.MergeRequest); ok {
		r0 = rf(repositoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repositoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
