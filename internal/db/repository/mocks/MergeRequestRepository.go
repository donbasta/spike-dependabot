// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "dependabot/internal/db/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MergeRequestRepository is an autogenerated mock type for the MergeRequestRepository type
type MergeRequestRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, mergeRequest
func (_m *MergeRequestRepository) Create(tx *gorm.DB, mergeRequest *entity.MergeRequest) (uuid.UUID, error) {
	ret := _m.Called(tx, mergeRequest)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*gorm.DB, *entity.MergeRequest) uuid.UUID); ok {
		r0 = rf(tx, mergeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *entity.MergeRequest) error); ok {
		r1 = rf(tx, mergeRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, mergeRequest
func (_m *MergeRequestRepository) Delete(tx *gorm.DB, mergeRequest *entity.MergeRequest) error {
	ret := _m.Called(tx, mergeRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *entity.MergeRequest) error); ok {
		r0 = rf(tx, mergeRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: tx
func (_m *MergeRequestRepository) GetAll(tx *gorm.DB) ([]entity.MergeRequest, error) {
	ret := _m.Called(tx)

	var r0 []entity.MergeRequest
	if rf, ok := ret.Get(0).(func(*gorm.DB) []entity.MergeRequest); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByRepositoryId provides a mock function with given fields: tx, repositoryID
func (_m *MergeRequestRepository) GetAllByRepositoryId(tx *gorm.DB, repositoryID string) ([]entity.MergeRequest, error) {
	ret := _m.Called(tx, repositoryID)

	var r0 []entity.MergeRequest
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) []entity.MergeRequest); ok {
		r0 = rf(tx, repositoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, repositoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: tx, id
func (_m *MergeRequestRepository) GetByID(tx *gorm.DB, id uuid.UUID) (entity.MergeRequest, error) {
	ret := _m.Called(tx, id)

	var r0 entity.MergeRequest
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) entity.MergeRequest); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Get(0).(entity.MergeRequest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tx, mergeRequest
func (_m *MergeRequestRepository) Update(tx *gorm.DB, mergeRequest *entity.MergeRequest) error {
	ret := _m.Called(tx, mergeRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *entity.MergeRequest) error); ok {
		r0 = rf(tx, mergeRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
